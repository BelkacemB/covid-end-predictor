{"version":3,"sources":["img/logo-m.png","components/Header.tsx","components/Footer.tsx","data/country-by-population.js","model/Model.ts","components/CountryCard.tsx","components/Predictor.tsx","components/Ranking.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","Navbar","bg","variant","Brand","href","alt","src","LogoImg","width","height","className","Footer","populations","country","population","sumReducer","a","b","world_population","map","reduce","dateCompare","date","getEndDate","speed","threshold","region","data","result","Date","remainingSusceptiblePopulation","getRemainingToBeVaccinatedPopulation","daysToVaccinate","Math","round","setDate","getDate","getRegionPopulation","getVaccinatedPopulationByRegion","regionPopulation","find","element","undefined","getNumberOfVaccinationsPerDayPerRegion","daysPeriod","vaccinationData","regionData","filter","v","location","sort","slice","length","day","daily_vaccinations","total_vaccinations","getAvailableCountries","populationCountries","p","vaccinatedCountries","includes","CountryCard","props","x","dailyVaccinations","id","toLocaleString","Predictor","useState","setDaysPeriod","setThreshold","endDate","setEndDate","vaccinationRegion","setVaccinationRegion","targetRegion","setTargetRegion","countryMenuItems","setCountryMenuItems","useEffect","dailyVaccPerRegion","MenuItem","value","Select","labelId","onChange","event","target","toLocaleDateString","Ranking","availableCountries","countriesRanked","reverse","countryRows","countryAndDate","App","setVaccinationData","fetch","then","res","json","e","catch","console","log","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mQAAe,MAA0B,mCCI1B,SAASA,IACtB,OACE,cAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,QAAQ,QAA3B,SACE,eAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,QAAnB,UACE,qBACEC,IAAI,GACJC,IAAKC,EACLC,MAAM,KACNC,OAAO,KACPC,UAAU,6BACT,IAPL,oBCLS,SAASC,IACtB,OACE,qBAAKD,UAAU,SAAf,SACE,2DCLC,IAAME,EAAc,CACzB,CACEC,QAAS,cACTC,WAAY,UAEd,CACED,QAAS,UACTC,WAAY,SAEd,CACED,QAAS,UACTC,WAAY,UAEd,CACED,QAAS,iBACTC,WAAY,OAEd,CACED,QAAS,UACTC,WAAY,OAEd,CACED,QAAS,SACTC,WAAY,UAEd,CACED,QAAS,WACTC,WAAY,OAEd,CACED,QAAS,aACTC,WAAY,MAEd,CACED,QAAS,sBACTC,WAAY,OAEd,CACED,QAAS,YACTC,WAAY,UAEd,CACED,QAAS,UACTC,WAAY,SAEd,CACED,QAAS,QACTC,WAAY,QAEd,CACED,QAAS,YACTC,WAAY,UAEd,CACED,QAAS,UACTC,WAAY,SAEd,CACED,QAAS,aACTC,WAAY,SAEd,CACED,QAAS,UACTC,WAAY,QAEd,CACED,QAAS,UACTC,WAAY,SAEd,CACED,QAAS,aACTC,WAAY,WAEd,CACED,QAAS,WACTC,WAAY,QAEd,CACED,QAAS,UACTC,WAAY,SAEd,CACED,QAAS,UACTC,WAAY,UAEd,CACED,QAAS,SACTC,WAAY,QAEd,CACED,QAAS,QACTC,WAAY,UAEd,CACED,QAAS,UACTC,WAAY,OAEd,CACED,QAAS,SACTC,WAAY,QAEd,CACED,QAAS,UACTC,WAAY,UAEd,CACED,QAAS,yBACTC,WAAY,SAEd,CACED,QAAS,WACTC,WAAY,SAEd,CACED,QAAS,gBACTC,WAAY,GAEd,CACED,QAAS,SACTC,WAAY,WAEd,CACED,QAAS,iCACTC,WAAY,GAEd,CACED,QAAS,SACTC,WAAY,QAEd,CACED,QAAS,WACTC,WAAY,SAEd,CACED,QAAS,eACTC,WAAY,UAEd,CACED,QAAS,UACTC,WAAY,UAEd,CACED,QAAS,WACTC,WAAY,UAEd,CACED,QAAS,WACTC,WAAY,UAEd,CACED,QAAS,SACTC,WAAY,UAEd,CACED,QAAS,aACTC,WAAY,QAEd,CACED,QAAS,iBACTC,WAAY,OAEd,CACED,QAAS,2BACTC,WAAY,SAEd,CACED,QAAS,OACTC,WAAY,UAEd,CACED,QAAS,QACTC,WAAY,UAEd,CACED,QAAS,QACTC,WAAY,UAEd,CACED,QAAS,mBACTC,WAAY,MAEd,CACED,QAAS,0BACTC,WAAY,KAEd,CACED,QAAS,WACTC,WAAY,UAEd,CACED,QAAS,UACTC,WAAY,QAEd,CACED,QAAS,QACTC,WAAY,SAEd,CACED,QAAS,eACTC,WAAY,OAEd,CACED,QAAS,aACTC,WAAY,SAEd,CACED,QAAS,UACTC,WAAY,SAEd,CACED,QAAS,OACTC,WAAY,UAEd,CACED,QAAS,SACTC,WAAY,SAEd,CACED,QAAS,iBACTC,WAAY,UAEd,CACED,QAAS,UACTC,WAAY,SAEd,CACED,QAAS,WACTC,WAAY,QAEd,CACED,QAAS,WACTC,WAAY,OAEd,CACED,QAAS,qBACTC,WAAY,UAEd,CACED,QAAS,aACTC,WAAY,SAEd,CACED,QAAS,UACTC,WAAY,UAEd,CACED,QAAS,QACTC,WAAY,UAEd,CACED,QAAS,cACTC,WAAY,SAEd,CACED,QAAS,UACTC,WAAY,UAEd,CACED,QAAS,oBACTC,WAAY,SAEd,CACED,QAAS,UACTC,WAAY,SAEd,CACED,QAAS,UACTC,WAAY,SAEd,CACED,QAAS,WACTC,WAAY,WAEd,CACED,QAAS,mBACTC,WAAY,MAEd,CACED,QAAS,gBACTC,WAAY,OAEd,CACED,QAAS,eACTC,WAAY,QAEd,CACED,QAAS,UACTC,WAAY,SAEd,CACED,QAAS,SACTC,WAAY,UAEd,CACED,QAAS,gBACTC,WAAY,QAEd,CACED,QAAS,mBACTC,WAAY,QAEd,CACED,QAAS,8BACTC,WAAY,GAEd,CACED,QAAS,QACTC,WAAY,SAEd,CACED,QAAS,SACTC,WAAY,SAEd,CACED,QAAS,UACTC,WAAY,SAEd,CACED,QAAS,UACTC,WAAY,UAEd,CACED,QAAS,QACTC,WAAY,UAEd,CACED,QAAS,YACTC,WAAY,OAEd,CACED,QAAS,SACTC,WAAY,UAEd,CACED,QAAS,YACTC,WAAY,OAEd,CACED,QAAS,UACTC,WAAY,QAEd,CACED,QAAS,aACTC,WAAY,QAEd,CACED,QAAS,OACTC,WAAY,QAEd,CACED,QAAS,YACTC,WAAY,UAEd,CACED,QAAS,SACTC,WAAY,UAEd,CACED,QAAS,gBACTC,WAAY,SAEd,CACED,QAAS,SACTC,WAAY,QAEd,CACED,QAAS,QACTC,WAAY,UAEd,CACED,QAAS,oCACTC,WAAY,GAEd,CACED,QAAS,gCACTC,WAAY,KAEd,CACED,QAAS,WACTC,WAAY,SAEd,CACED,QAAS,YACTC,WAAY,QAEd,CACED,QAAS,UACTC,WAAY,SAEd,CACED,QAAS,UACTC,WAAY,QAEd,CACED,QAAS,QACTC,WAAY,YAEd,CACED,QAAS,YACTC,WAAY,WAEd,CACED,QAAS,OACTC,WAAY,UAEd,CACED,QAAS,OACTC,WAAY,UAEd,CACED,QAAS,UACTC,WAAY,SAEd,CACED,QAAS,SACTC,WAAY,SAEd,CACED,QAAS,QACTC,WAAY,UAEd,CACED,QAAS,cACTC,WAAY,UAEd,CACED,QAAS,UACTC,WAAY,SAEd,CACED,QAAS,QACTC,WAAY,WAEd,CACED,QAAS,SACTC,WAAY,SAEd,CACED,QAAS,aACTC,WAAY,UAEd,CACED,QAAS,QACTC,WAAY,UAEd,CACED,QAAS,WACTC,WAAY,QAEd,CACED,QAAS,SACTC,WAAY,SAEd,CACED,QAAS,aACTC,WAAY,SAEd,CACED,QAAS,OACTC,WAAY,SAEd,CACED,QAAS,SACTC,WAAY,SAEd,CACED,QAAS,UACTC,WAAY,SAEd,CACED,QAAS,UACTC,WAAY,SAEd,CACED,QAAS,UACTC,WAAY,SAEd,CACED,QAAS,yBACTC,WAAY,SAEd,CACED,QAAS,gBACTC,WAAY,OAEd,CACED,QAAS,YACTC,WAAY,SAEd,CACED,QAAS,aACTC,WAAY,QAEd,CACED,QAAS,QACTC,WAAY,QAEd,CACED,QAAS,kBACTC,WAAY,SAEd,CACED,QAAS,aACTC,WAAY,UAEd,CACED,QAAS,SACTC,WAAY,UAEd,CACED,QAAS,WACTC,WAAY,UAEd,CACED,QAAS,WACTC,WAAY,QAEd,CACED,QAAS,OACTC,WAAY,UAEd,CACED,QAAS,QACTC,WAAY,QAEd,CACED,QAAS,mBACTC,WAAY,OAEd,CACED,QAAS,aACTC,WAAY,QAEd,CACED,QAAS,aACTC,WAAY,SAEd,CACED,QAAS,YACTC,WAAY,SAEd,CACED,QAAS,UACTC,WAAY,QAEd,CACED,QAAS,SACTC,WAAY,WAEd,CACED,QAAS,kCACTC,WAAY,QAEd,CACED,QAAS,UACTC,WAAY,SAEd,CACED,QAAS,SACTC,WAAY,OAEd,CACED,QAAS,WACTC,WAAY,SAEd,CACED,QAAS,aACTC,WAAY,QAEd,CACED,QAAS,aACTC,WAAY,MAEd,CACED,QAAS,UACTC,WAAY,UAEd,CACED,QAAS,aACTC,WAAY,UAEd,CACED,QAAS,UACTC,WAAY,UAEd,CACED,QAAS,UACTC,WAAY,SAEd,CACED,QAAS,QACTC,WAAY,OAEd,CACED,QAAS,QACTC,WAAY,UAEd,CACED,QAAS,cACTC,WAAY,UAEd,CACED,QAAS,uBACTC,WAAY,QAEd,CACED,QAAS,gBACTC,WAAY,QAEd,CACED,QAAS,cACTC,WAAY,QAEd,CACED,QAAS,YACTC,WAAY,SAEd,CACED,QAAS,QACTC,WAAY,UAEd,CACED,QAAS,UACTC,WAAY,WAEd,CACED,QAAS,OACTC,WAAY,MAEd,CACED,QAAS,iBACTC,WAAY,MAEd,CACED,QAAS,cACTC,WAAY,UAEd,CACED,QAAS,mBACTC,WAAY,SAEd,CACED,QAAS,2BACTC,WAAY,OAEd,CACED,QAAS,SACTC,WAAY,SAEd,CACED,QAAS,OACTC,WAAY,SAEd,CACED,QAAS,WACTC,WAAY,WAEd,CACED,QAAS,QACTC,WAAY,OAEd,CACED,QAAS,YACTC,WAAY,SAEd,CACED,QAAS,SACTC,WAAY,SAEd,CACED,QAAS,mBACTC,WAAY,SAEd,CACED,QAAS,WACTC,WAAY,SAEd,CACED,QAAS,OACTC,WAAY,UAEd,CACED,QAAS,cACTC,WAAY,WAEd,CACED,QAAS,WACTC,WAAY,IAEd,CACED,QAAS,SACTC,WAAY,UAEd,CACED,QAAS,WACTC,WAAY,UAEd,CACED,QAAS,cACTC,WAAY,SAEd,CACED,QAAS,QACTC,WAAY,SAEd,CACED,QAAS,UACTC,WAAY,QAEd,CACED,QAAS,UACTC,WAAY,UAEd,CACED,QAAS,qBACTC,WAAY,WAEd,CACED,QAAS,SACTC,WAAY,UAEd,CACED,QAAS,eACTC,WAAY,MAEd,CACED,QAAS,wBACTC,WAAY,OAEd,CACED,QAAS,cACTC,WAAY,QAEd,CACED,QAAS,4BACTC,WAAY,MAEd,CACED,QAAS,mCACTC,WAAY,QAEd,CACED,QAAS,QACTC,WAAY,QAEd,CACED,QAAS,aACTC,WAAY,OAEd,CACED,QAAS,wBACTC,WAAY,QAEd,CACED,QAAS,eACTC,WAAY,UAEd,CACED,QAAS,WACTC,WAAY,SAEd,CACED,QAAS,UACTC,WAAY,UAEd,CACED,QAAS,SACTC,WAAY,SAEd,CACED,QAAS,aACTC,WAAY,OAEd,CACED,QAAS,eACTC,WAAY,SAEd,CACED,QAAS,YACTC,WAAY,SAEd,CACED,QAAS,WACTC,WAAY,SAEd,CACED,QAAS,WACTC,WAAY,SAEd,CACED,QAAS,kBACTC,WAAY,QAEd,CACED,QAAS,UACTC,WAAY,UAEd,CACED,QAAS,eACTC,WAAY,UAEd,CACED,QAAS,+CACTC,WAAY,IAEd,CACED,QAAS,cACTC,WAAY,UAEd,CACED,QAAS,cACTC,WAAY,UAEd,CACED,QAAS,QACTC,WAAY,UAEd,CACED,QAAS,WACTC,WAAY,QAEd,CACED,QAAS,QACTC,WAAY,UAEd,CACED,QAAS,WACTC,WAAY,QAEd,CACED,QAAS,yBACTC,WAAY,MAEd,CACED,QAAS,YACTC,WAAY,SAEd,CACED,QAAS,SACTC,WAAY,UAEd,CACED,QAAS,cACTC,WAAY,SAEd,CACED,QAAS,QACTC,WAAY,UAEd,CACED,QAAS,aACTC,WAAY,SAEd,CACED,QAAS,WACTC,WAAY,UAEd,CACED,QAAS,WACTC,WAAY,UAEd,CACED,QAAS,mCACTC,WAAY,UAEd,CACED,QAAS,OACTC,WAAY,SAEd,CACED,QAAS,UACTC,WAAY,MAEd,CACED,QAAS,QACTC,WAAY,QAEd,CACED,QAAS,sBACTC,WAAY,SAEd,CACED,QAAS,UACTC,WAAY,UAEd,CACED,QAAS,SACTC,WAAY,UAEd,CACED,QAAS,eACTC,WAAY,SAEd,CACED,QAAS,2BACTC,WAAY,OAEd,CACED,QAAS,SACTC,WAAY,OAEd,CACED,QAAS,SACTC,WAAY,UAEd,CACED,QAAS,UACTC,WAAY,UAEd,CACED,QAAS,uBACTC,WAAY,SAEd,CACED,QAAS,iBACTC,WAAY,UAEd,CACED,QAAS,gBACTC,WAAY,WAEd,CACED,QAAS,uCACTC,WAAY,KAEd,CACED,QAAS,UACTC,WAAY,SAEd,CACED,QAAS,aACTC,WAAY,UAEd,CACED,QAAS,UACTC,WAAY,QAEd,CACED,QAAS,YACTC,WAAY,UAEd,CACED,QAAS,UACTC,WAAY,UAEd,CACED,QAAS,0BACTC,WAAY,OAEd,CACED,QAAS,uBACTC,WAAY,QAEd,CACED,QAAS,QACTC,WAAY,QAEd,CACED,QAAS,oBACTC,WAAY,OAEd,CACED,QAAS,iBACTC,WAAY,QAEd,CACED,QAAS,QACTC,WAAY,UAEd,CACED,QAAS,SACTC,WAAY,UAEd,CACED,QAAS,WACTC,WAAY,UAEd,CACED,QAAS,QACTC,WAAa,aCj9BXC,EAAa,SAACC,EAAWC,GAAZ,OAA0BD,EAAIC,GAE3CC,EAAmBN,EACtBO,KAAI,SAACN,GAAD,OAAaA,EAAQC,cACzBM,OAAOL,GAEGM,EAAc,SAACL,EAAQC,GAClC,OAAID,EAAEM,KAAOL,EAAEK,MAAc,EACjB,GAGP,SAASC,EACdC,EACAC,EACAC,EACAC,GAEA,IAAIC,EAAS,IAAIC,KACbC,EAAiCC,EACnCN,EACAC,EACAC,GAEEK,EAAkBC,KAAK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","file":"static/js/main.962e4871.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo-m.579b5963.png\";","import React from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport LogoImg from \"../img/logo-m.png\";\n\nexport default function Header() {\n  return (\n    <Navbar bg=\"light\" variant=\"light\">\n      <Navbar.Brand href=\"#home\">\n        <img\n          alt=\"\"\n          src={LogoImg}\n          width=\"40\"\n          height=\"40\"\n          className=\"d-inline-block align-top\"\n        />{\" \"}\n        Vaccine Race\n      </Navbar.Brand>\n    </Navbar>\n  );\n}\n","import React from \"react\";\n\nexport default function Footer() {\n  return (\n    <div className=\"footer\">\n      <p>Belkacem Berchiche, 2021</p>\n    </div>\n  );\n}\n","export const populations = [\n  {\n    country: \"Afghanistan\",\n    population: 37172386,\n  },\n  {\n    country: \"Albania\",\n    population: 2866376,\n  },\n  {\n    country: \"Algeria\",\n    population: 42228429,\n  },\n  {\n    country: \"American Samoa\",\n    population: 55465,\n  },\n  {\n    country: \"Andorra\",\n    population: 77006,\n  },\n  {\n    country: \"Angola\",\n    population: 30809762,\n  },\n  {\n    country: \"Anguilla\",\n    population: 15094,\n  },\n  {\n    country: \"Antarctica\",\n    population: 1106,\n  },\n  {\n    country: \"Antigua and Barbuda\",\n    population: 96286,\n  },\n  {\n    country: \"Argentina\",\n    population: 44494502,\n  },\n  {\n    country: \"Armenia\",\n    population: 2951776,\n  },\n  {\n    country: \"Aruba\",\n    population: 105845,\n  },\n  {\n    country: \"Australia\",\n    population: 24982688,\n  },\n  {\n    country: \"Austria\",\n    population: 8840521,\n  },\n  {\n    country: \"Azerbaijan\",\n    population: 9939800,\n  },\n  {\n    country: \"Bahamas\",\n    population: 385640,\n  },\n  {\n    country: \"Bahrain\",\n    population: 1569439,\n  },\n  {\n    country: \"Bangladesh\",\n    population: 161356039,\n  },\n  {\n    country: \"Barbados\",\n    population: 286641,\n  },\n  {\n    country: \"Belarus\",\n    population: 9483499,\n  },\n  {\n    country: \"Belgium\",\n    population: 11433256,\n  },\n  {\n    country: \"Belize\",\n    population: 383071,\n  },\n  {\n    country: \"Benin\",\n    population: 11485048,\n  },\n  {\n    country: \"Bermuda\",\n    population: 63973,\n  },\n  {\n    country: \"Bhutan\",\n    population: 754394,\n  },\n  {\n    country: \"Bolivia\",\n    population: 11353142,\n  },\n  {\n    country: \"Bosnia and Herzegovina\",\n    population: 3323929,\n  },\n  {\n    country: \"Botswana\",\n    population: 2254126,\n  },\n  {\n    country: \"Bouvet Island\",\n    population: 0,\n  },\n  {\n    country: \"Brazil\",\n    population: 209469333,\n  },\n  {\n    country: \"British Indian Ocean Territory\",\n    population: 0,\n  },\n  {\n    country: \"Brunei\",\n    population: 428962,\n  },\n  {\n    country: \"Bulgaria\",\n    population: 7025037,\n  },\n  {\n    country: \"Burkina Faso\",\n    population: 19751535,\n  },\n  {\n    country: \"Burundi\",\n    population: 11175378,\n  },\n  {\n    country: \"Cambodia\",\n    population: 16249798,\n  },\n  {\n    country: \"Cameroon\",\n    population: 25216237,\n  },\n  {\n    country: \"Canada\",\n    population: 37057765,\n  },\n  {\n    country: \"Cape Verde\",\n    population: 543767,\n  },\n  {\n    country: \"Cayman Islands\",\n    population: 64174,\n  },\n  {\n    country: \"Central African Republic\",\n    population: 4666377,\n  },\n  {\n    country: \"Chad\",\n    population: 15477751,\n  },\n  {\n    country: \"Chile\",\n    population: 18729160,\n  },\n  {\n    country: \"China\",\n    population: 1392730000,\n  },\n  {\n    country: \"Christmas Island\",\n    population: 1402,\n  },\n  {\n    country: \"Cocos (Keeling) Islands\",\n    population: 596,\n  },\n  {\n    country: \"Colombia\",\n    population: 49648685,\n  },\n  {\n    country: \"Comoros\",\n    population: 832322,\n  },\n  {\n    country: \"Congo\",\n    population: 5244363,\n  },\n  {\n    country: \"Cook Islands\",\n    population: 17379,\n  },\n  {\n    country: \"Costa Rica\",\n    population: 4999441,\n  },\n  {\n    country: \"Croatia\",\n    population: 4087843,\n  },\n  {\n    country: \"Cuba\",\n    population: 11338138,\n  },\n  {\n    country: \"Cyprus\",\n    population: 1189265,\n  },\n  {\n    country: \"Czech Republic\",\n    population: 10629928,\n  },\n  {\n    country: \"Denmark\",\n    population: 5793636,\n  },\n  {\n    country: \"Djibouti\",\n    population: 958920,\n  },\n  {\n    country: \"Dominica\",\n    population: 71625,\n  },\n  {\n    country: \"Dominican Republic\",\n    population: 10627165,\n  },\n  {\n    country: \"East Timor\",\n    population: 1267972,\n  },\n  {\n    country: \"Ecuador\",\n    population: 17084357,\n  },\n  {\n    country: \"Egypt\",\n    population: 98423595,\n  },\n  {\n    country: \"El Salvador\",\n    population: 6420744,\n  },\n  {\n    country: \"England\",\n    population: 55619400,\n  },\n  {\n    country: \"Equatorial Guinea\",\n    population: 1308974,\n  },\n  {\n    country: \"Eritrea\",\n    population: 3213972,\n  },\n  {\n    country: \"Estonia\",\n    population: 1321977,\n  },\n  {\n    country: \"Ethiopia\",\n    population: 109224559,\n  },\n  {\n    country: \"Falkland Islands\",\n    population: 2840,\n  },\n  {\n    country: \"Faroe Islands\",\n    population: 48497,\n  },\n  {\n    country: \"Fiji Islands\",\n    population: 883483,\n  },\n  {\n    country: \"Finland\",\n    population: 5515525,\n  },\n  {\n    country: \"France\",\n    population: 66977107,\n  },\n  {\n    country: \"French Guiana\",\n    population: 290691,\n  },\n  {\n    country: \"French Polynesia\",\n    population: 277679,\n  },\n  {\n    country: \"French Southern territories\",\n    population: 0,\n  },\n  {\n    country: \"Gabon\",\n    population: 2119275,\n  },\n  {\n    country: \"Gambia\",\n    population: 2280102,\n  },\n  {\n    country: \"Georgia\",\n    population: 3726549,\n  },\n  {\n    country: \"Germany\",\n    population: 82905782,\n  },\n  {\n    country: \"Ghana\",\n    population: 29767108,\n  },\n  {\n    country: \"Gibraltar\",\n    population: 33718,\n  },\n  {\n    country: \"Greece\",\n    population: 10731726,\n  },\n  {\n    country: \"Greenland\",\n    population: 56025,\n  },\n  {\n    country: \"Grenada\",\n    population: 111454,\n  },\n  {\n    country: \"Guadeloupe\",\n    population: 395700,\n  },\n  {\n    country: \"Guam\",\n    population: 165768,\n  },\n  {\n    country: \"Guatemala\",\n    population: 17247807,\n  },\n  {\n    country: \"Guinea\",\n    population: 12414318,\n  },\n  {\n    country: \"Guinea-Bissau\",\n    population: 1874309,\n  },\n  {\n    country: \"Guyana\",\n    population: 779004,\n  },\n  {\n    country: \"Haiti\",\n    population: 11123176,\n  },\n  {\n    country: \"Heard Island and McDonald Islands\",\n    population: 0,\n  },\n  {\n    country: \"Holy See (Vatican City State)\",\n    population: 825,\n  },\n  {\n    country: \"Honduras\",\n    population: 9587522,\n  },\n  {\n    country: \"Hong Kong\",\n    population: 7451000,\n  },\n  {\n    country: \"Hungary\",\n    population: 9775564,\n  },\n  {\n    country: \"Iceland\",\n    population: 352721,\n  },\n  {\n    country: \"India\",\n    population: 1352617328,\n  },\n  {\n    country: \"Indonesia\",\n    population: 267663435,\n  },\n  {\n    country: \"Iran\",\n    population: 81800269,\n  },\n  {\n    country: \"Iraq\",\n    population: 38433600,\n  },\n  {\n    country: \"Ireland\",\n    population: 4867309,\n  },\n  {\n    country: \"Israel\",\n    population: 8882800,\n  },\n  {\n    country: \"Italy\",\n    population: 60421760,\n  },\n  {\n    country: \"Ivory Coast\",\n    population: 25069229,\n  },\n  {\n    country: \"Jamaica\",\n    population: 2934855,\n  },\n  {\n    country: \"Japan\",\n    population: 126529100,\n  },\n  {\n    country: \"Jordan\",\n    population: 9956011,\n  },\n  {\n    country: \"Kazakhstan\",\n    population: 18272430,\n  },\n  {\n    country: \"Kenya\",\n    population: 51393010,\n  },\n  {\n    country: \"Kiribati\",\n    population: 115847,\n  },\n  {\n    country: \"Kuwait\",\n    population: 4137309,\n  },\n  {\n    country: \"Kyrgyzstan\",\n    population: 6322800,\n  },\n  {\n    country: \"Laos\",\n    population: 7061507,\n  },\n  {\n    country: \"Latvia\",\n    population: 1927174,\n  },\n  {\n    country: \"Lebanon\",\n    population: 6848925,\n  },\n  {\n    country: \"Lesotho\",\n    population: 2108132,\n  },\n  {\n    country: \"Liberia\",\n    population: 4818977,\n  },\n  {\n    country: \"Libyan Arab Jamahiriya\",\n    population: 6678567,\n  },\n  {\n    country: \"Liechtenstein\",\n    population: 37910,\n  },\n  {\n    country: \"Lithuania\",\n    population: 2801543,\n  },\n  {\n    country: \"Luxembourg\",\n    population: 607950,\n  },\n  {\n    country: \"Macao\",\n    population: 631636,\n  },\n  {\n    country: \"North Macedonia\",\n    population: 2084367,\n  },\n  {\n    country: \"Madagascar\",\n    population: 26262368,\n  },\n  {\n    country: \"Malawi\",\n    population: 18143315,\n  },\n  {\n    country: \"Malaysia\",\n    population: 31528585,\n  },\n  {\n    country: \"Maldives\",\n    population: 515696,\n  },\n  {\n    country: \"Mali\",\n    population: 19077690,\n  },\n  {\n    country: \"Malta\",\n    population: 484630,\n  },\n  {\n    country: \"Marshall Islands\",\n    population: 58413,\n  },\n  {\n    country: \"Martinique\",\n    population: 376480,\n  },\n  {\n    country: \"Mauritania\",\n    population: 4403319,\n  },\n  {\n    country: \"Mauritius\",\n    population: 1265303,\n  },\n  {\n    country: \"Mayotte\",\n    population: 270372,\n  },\n  {\n    country: \"Mexico\",\n    population: 126190788,\n  },\n  {\n    country: \"Micronesia, Federated States of\",\n    population: 112640,\n  },\n  {\n    country: \"Moldova\",\n    population: 2706049,\n  },\n  {\n    country: \"Monaco\",\n    population: 38682,\n  },\n  {\n    country: \"Mongolia\",\n    population: 3170208,\n  },\n  {\n    country: \"Montenegro\",\n    population: 631219,\n  },\n  {\n    country: \"Montserrat\",\n    population: 5900,\n  },\n  {\n    country: \"Morocco\",\n    population: 36029138,\n  },\n  {\n    country: \"Mozambique\",\n    population: 29495962,\n  },\n  {\n    country: \"Myanmar\",\n    population: 53708395,\n  },\n  {\n    country: \"Namibia\",\n    population: 2448255,\n  },\n  {\n    country: \"Nauru\",\n    population: 12704,\n  },\n  {\n    country: \"Nepal\",\n    population: 28087871,\n  },\n  {\n    country: \"Netherlands\",\n    population: 17231624,\n  },\n  {\n    country: \"Netherlands Antilles\",\n    population: 227049,\n  },\n  {\n    country: \"New Caledonia\",\n    population: 284060,\n  },\n  {\n    country: \"New Zealand\",\n    population: 4841000,\n  },\n  {\n    country: \"Nicaragua\",\n    population: 6465513,\n  },\n  {\n    country: \"Niger\",\n    population: 22442948,\n  },\n  {\n    country: \"Nigeria\",\n    population: 195874740,\n  },\n  {\n    country: \"Niue\",\n    population: 1624,\n  },\n  {\n    country: \"Norfolk Island\",\n    population: 2169,\n  },\n  {\n    country: \"North Korea\",\n    population: 25549819,\n  },\n  {\n    country: \"Northern Ireland\",\n    population: 1885400,\n  },\n  {\n    country: \"Northern Mariana Islands\",\n    population: 56882,\n  },\n  {\n    country: \"Norway\",\n    population: 5311916,\n  },\n  {\n    country: \"Oman\",\n    population: 4829483,\n  },\n  {\n    country: \"Pakistan\",\n    population: 212215030,\n  },\n  {\n    country: \"Palau\",\n    population: 17907,\n  },\n  {\n    country: \"Palestine\",\n    population: 4569087,\n  },\n  {\n    country: \"Panama\",\n    population: 4176873,\n  },\n  {\n    country: \"Papua New Guinea\",\n    population: 8606316,\n  },\n  {\n    country: \"Paraguay\",\n    population: 6956071,\n  },\n  {\n    country: \"Peru\",\n    population: 31989256,\n  },\n  {\n    country: \"Philippines\",\n    population: 106651922,\n  },\n  {\n    country: \"Pitcairn\",\n    population: 67,\n  },\n  {\n    country: \"Poland\",\n    population: 37974750,\n  },\n  {\n    country: \"Portugal\",\n    population: 10283822,\n  },\n  {\n    country: \"Puerto Rico\",\n    population: 3195153,\n  },\n  {\n    country: \"Qatar\",\n    population: 2781677,\n  },\n  {\n    country: \"Reunion\",\n    population: 859959,\n  },\n  {\n    country: \"Romania\",\n    population: 19466145,\n  },\n  {\n    country: \"Russian Federation\",\n    population: 144478050,\n  },\n  {\n    country: \"Rwanda\",\n    population: 12301939,\n  },\n  {\n    country: \"Saint Helena\",\n    population: 6600,\n  },\n  {\n    country: \"Saint Kitts and Nevis\",\n    population: 52441,\n  },\n  {\n    country: \"Saint Lucia\",\n    population: 181889,\n  },\n  {\n    country: \"Saint Pierre and Miquelon\",\n    population: 5888,\n  },\n  {\n    country: \"Saint Vincent and the Grenadines\",\n    population: 110210,\n  },\n  {\n    country: \"Samoa\",\n    population: 196130,\n  },\n  {\n    country: \"San Marino\",\n    population: 33785,\n  },\n  {\n    country: \"Sao Tome and Principe\",\n    population: 211028,\n  },\n  {\n    country: \"Saudi Arabia\",\n    population: 33699947,\n  },\n  {\n    country: \"Scotland\",\n    population: 5424800,\n  },\n  {\n    country: \"Senegal\",\n    population: 15854360,\n  },\n  {\n    country: \"Serbia\",\n    population: 6963764,\n  },\n  {\n    country: \"Seychelles\",\n    population: 96762,\n  },\n  {\n    country: \"Sierra Leone\",\n    population: 7650154,\n  },\n  {\n    country: \"Singapore\",\n    population: 5638676,\n  },\n  {\n    country: \"Slovakia\",\n    population: 5446771,\n  },\n  {\n    country: \"Slovenia\",\n    population: 2073894,\n  },\n  {\n    country: \"Solomon Islands\",\n    population: 652858,\n  },\n  {\n    country: \"Somalia\",\n    population: 15008154,\n  },\n  {\n    country: \"South Africa\",\n    population: 57779622,\n  },\n  {\n    country: \"South Georgia and the South Sandwich Islands\",\n    population: 30,\n  },\n  {\n    country: \"South Korea\",\n    population: 51606633,\n  },\n  {\n    country: \"South Sudan\",\n    population: 10975920,\n  },\n  {\n    country: \"Spain\",\n    population: 46796540,\n  },\n  {\n    country: \"SriLanka\",\n    population: 21670000,\n  },\n  {\n    country: \"Sudan\",\n    population: 41801533,\n  },\n  {\n    country: \"Suriname\",\n    population: 575991,\n  },\n  {\n    country: \"Svalbard and Jan Mayen\",\n    population: 2572,\n  },\n  {\n    country: \"Swaziland\",\n    population: 1136191,\n  },\n  {\n    country: \"Sweden\",\n    population: 10175214,\n  },\n  {\n    country: \"Switzerland\",\n    population: 8513227,\n  },\n  {\n    country: \"Syria\",\n    population: 16906283,\n  },\n  {\n    country: \"Tajikistan\",\n    population: 9100837,\n  },\n  {\n    country: \"Tanzania\",\n    population: 56318348,\n  },\n  {\n    country: \"Thailand\",\n    population: 69428524,\n  },\n  {\n    country: \"The Democratic Republic of Congo\",\n    population: 84068091,\n  },\n  {\n    country: \"Togo\",\n    population: 7889094,\n  },\n  {\n    country: \"Tokelau\",\n    population: 1411,\n  },\n  {\n    country: \"Tonga\",\n    population: 103197,\n  },\n  {\n    country: \"Trinidad and Tobago\",\n    population: 1389858,\n  },\n  {\n    country: \"Tunisia\",\n    population: 11565204,\n  },\n  {\n    country: \"Turkey\",\n    population: 82319724,\n  },\n  {\n    country: \"Turkmenistan\",\n    population: 5850908,\n  },\n  {\n    country: \"Turks and Caicos Islands\",\n    population: 37665,\n  },\n  {\n    country: \"Tuvalu\",\n    population: 11508,\n  },\n  {\n    country: \"Uganda\",\n    population: 42723139,\n  },\n  {\n    country: \"Ukraine\",\n    population: 44622516,\n  },\n  {\n    country: \"United Arab Emirates\",\n    population: 9630959,\n  },\n  {\n    country: \"United Kingdom\",\n    population: 66460344,\n  },\n  {\n    country: \"United States\",\n    population: 326687501,\n  },\n  {\n    country: \"United States Minor Outlying Islands\",\n    population: 300,\n  },\n  {\n    country: \"Uruguay\",\n    population: 3449299,\n  },\n  {\n    country: \"Uzbekistan\",\n    population: 32955400,\n  },\n  {\n    country: \"Vanuatu\",\n    population: 292680,\n  },\n  {\n    country: \"Venezuela\",\n    population: 28870195,\n  },\n  {\n    country: \"Vietnam\",\n    population: 95540395,\n  },\n  {\n    country: \"Virgin Islands, British\",\n    population: 29802,\n  },\n  {\n    country: \"Virgin Islands, U.S.\",\n    population: 106977,\n  },\n  {\n    country: \"Wales\",\n    population: 3139000,\n  },\n  {\n    country: \"Wallis and Futuna\",\n    population: 15289,\n  },\n  {\n    country: \"Western Sahara\",\n    population: 652271,\n  },\n  {\n    country: \"Yemen\",\n    population: 28498687,\n  },\n  {\n    country: \"Zambia\",\n    population: 17351822,\n  },\n  {\n    country: \"Zimbabwe\",\n    population: 14439018,\n  },\n  {\n    country: \"World\",\n    population:  7874965825,\n  }\n];\n","import { populations } from \"../data/country-by-population\";\n\nconst sumReducer = (a: number, b: number) => a + b;\n\nconst world_population = populations\n  .map((country) => country.population)\n  .reduce(sumReducer);\n\nexport const dateCompare = (a: any, b: any) => {\n  if (a.date > b.date) return -1;\n  else return 1;\n};\n\nexport function getEndDate(\n  speed: number,\n  threshold: number,\n  region: string,\n  data: any[]\n): Date {\n  let result = new Date();\n  let remainingSusceptiblePopulation = getRemainingToBeVaccinatedPopulation(\n    threshold,\n    region,\n    data\n  );\n  let daysToVaccinate = Math.round(remainingSusceptiblePopulation / speed);\n  result.setDate(result.getDate() + daysToVaccinate);\n  return result;\n}\n\nexport function getRemainingToBeVaccinatedPopulation(\n  threshold: number,\n  region: string,\n  data: any[]\n) {\n  return (\n    threshold * (getRegionPopulation(region) ?? world_population) -\n    getVaccinatedPopulationByRegion(region, data)\n  );\n}\n\nexport function getRegionPopulation(region: string): number {\n  let result: number = 0;\n  const regionPopulation = populations.find(\n    (element) => element.country === region\n  )?.population;\n  if (regionPopulation !== undefined) result = regionPopulation;\n  return result;\n}\n\nexport function getNumberOfVaccinationsPerDayPerRegion(\n  daysPeriod: number,\n  region: string,\n  vaccinationData: any[]\n): number {\n  let regionData = vaccinationData.filter((v) => v.location === region);\n  regionData.sort(dateCompare);\n  regionData = regionData.slice(0, daysPeriod);\n  let totalDailyVaccinations =\n    regionData.length > 0\n      ? regionData.map((day) => day.daily_vaccinations).reduce(sumReducer)\n      : 1000;\n  let vaccPerDay = totalDailyVaccinations / daysPeriod;\n  return vaccPerDay;\n}\n\nexport function getVaccinatedPopulationByRegion(\n  region: string,\n  vaccinationData: any[]\n): number {\n  let regionData = vaccinationData.filter((v) => v.location === region);\n  regionData.sort(dateCompare);\n  let result = regionData.length > 0 ? regionData[0].total_vaccinations : 0;\n  return result;\n}\n\nexport function getAvailableCountries(vaccinationData: any[]): string[] {\n  // Don't forget to push\n  let populationCountries = populations.map((p) => p.country);\n  let vaccinatedCountries = vaccinationData.map((p) => p.location);\n  let result = populationCountries.filter((country) =>\n    vaccinatedCountries.includes(country)\n  );\n  return result;\n}\n\nexport function formatChartData(data: any[], region: string) {\n  let dataArray = data\n    .filter((e) => e.location === region && e.total_vaccinations !== undefined)\n    .map((e) => {\n      let result = { x: e.date.slice(0, 10), y: e.total_vaccinations };\n      return result;\n    });\n  return [{ id: region, data: dataArray }];\n}\n","import React from \"react\";\nimport {\n  getNumberOfVaccinationsPerDayPerRegion,\n  getRegionPopulation,\n  getRemainingToBeVaccinatedPopulation,\n  getVaccinatedPopulationByRegion,\n} from \"../model/Model\";\nimport VaccineChart from \"./VaccineChart\";\n\nexport default function CountryCard(props: any) {\n  let countryData = props.data.filter(\n    (x: any) =>\n      x.location === props.region && x.total_vaccinations !== undefined\n  );\n\n  let regionPopulation = getRegionPopulation(props.region);\n\n  let dailyVaccinations = Math.round(\n    getNumberOfVaccinationsPerDayPerRegion(\n      props.daysPeriod,\n      props.region,\n      props.data\n    )\n  );\n\n  return (\n    <div className=\"country-card\">\n      <div id=\"vac-chart\">\n      </div>\n      <br />\n      <p>\n        Daily vaccinations:{\" \"}\n        <span className=\"number\">{dailyVaccinations.toLocaleString()}</span>\n        /day\n      </p>\n      <p>\n        Total vaccinations to this day:{\" \"}\n        <span className=\"number\">\n          {getVaccinatedPopulationByRegion(\n            props.region,\n            props.data\n          ).toLocaleString()}\n        </span>\n      </p>\n      <p>\n        Remaining population to be vaccinated:{\" \"}\n        <span className=\"number\">\n          {Math.round(\n            getRemainingToBeVaccinatedPopulation(\n              props.threshold,\n              props.region,\n              props.data\n            )\n          ).toLocaleString()}\n        </span>\n      </p>\n      <p>\n        Total population:{\" \"}\n        <span className=\"number\">{regionPopulation.toLocaleString()}</span>\n      </p>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport CountryCard from \"./CountryCard\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport {\n  getEndDate,\n  getNumberOfVaccinationsPerDayPerRegion,\n  getAvailableCountries,\n} from \"../model/Model\";\n\nfunction Predictor(props: any) {\n  var { data } = props;\n  const [daysPeriod, setDaysPeriod] = useState(1);\n  const [threshold, setThreshold] = useState(0.7);\n  const [endDate, setEndDate] = useState(new Date());\n  const [vaccinationRegion, setVaccinationRegion] = useState(\"United States\");\n  const [targetRegion, setTargetRegion] = useState(\"United States\");\n  const [countryMenuItems, setCountryMenuItems] = useState<Array<JSX.Element>>(\n    []\n  );\n\n  useEffect(() => {\n    let dailyVaccPerRegion = getNumberOfVaccinationsPerDayPerRegion(\n      daysPeriod,\n      vaccinationRegion,\n      data\n    );\n    setEndDate(getEndDate(dailyVaccPerRegion, threshold, targetRegion, data));\n  }, [data, threshold, daysPeriod, vaccinationRegion, targetRegion]);\n\n  const handleDaysChange = (event: any) => {\n    setDaysPeriod(event.target.value);\n  };\n\n  const handleThresholdChange = (event: any) => {\n    setThreshold(event.target.value);\n  };\n\n  const handleVaccinationRegionChange = (event: any) => {\n    setVaccinationRegion(event.target.value);\n    setTargetRegion(event.target.value);\n  };\n\n  const handleTargetRegionChange = (event: any) => {\n    setTargetRegion(event.target.value);\n    setVaccinationRegion(event.target.value);\n  };\n\n  useEffect(() => {\n    let countryMenuItems: JSX.Element[] = getAvailableCountries(data).map(\n      (country) => {\n        return (\n          <MenuItem value={country} id={country}>\n            {country}\n          </MenuItem>\n        );\n      }\n    );\n    setCountryMenuItems(countryMenuItems);\n  }, [data]);\n\n  return (\n    <div id=\"predictor\">\n      Based on the speed of vaccination in the last &nbsp;\n      <Select\n        labelId=\"daysPeriodLabel\"\n        id=\"daysPeriodId\"\n        value={daysPeriod}\n        onChange={handleDaysChange}\n      >\n        <MenuItem value={1}>1</MenuItem>\n        <MenuItem value={2}>2</MenuItem>\n        <MenuItem value={3}>3</MenuItem>\n      </Select>\n      days in the &nbsp;\n      <Select\n        labelId=\"vaccinationCountryLabel\"\n        id=\"vaccinationCountryId\"\n        value={vaccinationRegion}\n        onChange={handleVaccinationRegionChange}\n      >\n        {countryMenuItems}\n      </Select>\n      , &nbsp;\n      <Select\n        labelId=\"thresholdLabel\"\n        id=\"thresholdId\"\n        value={threshold}\n        onChange={handleThresholdChange}\n      >\n        <MenuItem value={0.6}>60%</MenuItem>\n        <MenuItem value={0.7}>70%</MenuItem>\n        <MenuItem value={0.8}>80%</MenuItem>\n      </Select>\n      &nbsp; of the &nbsp;\n      <Select\n        labelId=\"targetCountryLabel\"\n        id=\"targetCountryId\"\n        value={targetRegion}\n        onChange={handleTargetRegionChange}\n      >\n        {countryMenuItems}\n      </Select>\n      population will be vaccinated in: <br />\n      <br />\n      <h1 className=\"date\">{endDate.toLocaleDateString(\"fr-FR\")}</h1>\n      {data != null ? (\n        <CountryCard\n          daysPeriod={daysPeriod}\n          region={targetRegion}\n          data={data}\n          endDate={endDate}\n          threshold={threshold}\n        />\n      ) : (\n        <br />\n      )}\n    </div>\n  );\n}\n\nexport default Predictor;\n","import React from \"react\";\nimport {\n  getAvailableCountries,\n  getNumberOfVaccinationsPerDayPerRegion,\n  getEndDate,\n  dateCompare,\n} from \"../model/Model\";\n\nfunction Ranking(props: any) {\n  let { data } = props;\n\n  let availableCountries = getAvailableCountries(data);\n\n  let countriesRanked = availableCountries?.map((country) => {\n    let dailyVaccPerRegion = getNumberOfVaccinationsPerDayPerRegion(\n      1,\n      country,\n      data\n    );\n    let endDate = getEndDate(dailyVaccPerRegion, 0.7, country, data);\n    let countryAndEndDate = { country: country, date: endDate };\n    return countryAndEndDate;\n  });\n\n  countriesRanked.sort(dateCompare).reverse();\n\n  let countryRows: JSX.Element[] = countriesRanked.map((countryAndDate) => {\n    return (\n      <tr key={countryAndDate.country}>\n        <td>{countryAndDate.country}</td>\n        <td>{countryAndDate.date.toLocaleDateString(\"fr-FR\")}</td>\n      </tr>\n    );\n  });\n\n  return (\n    <div id=\"ranking\">\n      <table>\n        <tr>\n          <th>Country</th>\n          <th>Projected vaccine-induced herd immunity</th>\n        </tr>\n        {countryRows.slice(0, 15)}\n      </table>\n    </div>\n  );\n}\n\nexport default Ranking;\n","import React, { useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Predictor from \"./components/Predictor\";\nimport Ranking from \"./components/Ranking\";\n\nfunction App() {\n  const [vaccinationData, setVaccinationData] = useState([]);\n\n  useEffect(() => {\n    fetch(\"https://covid-express.herokuapp.com/api/vaccinations\")\n      .then((res) => res.json())\n      .then((data) => {\n        setVaccinationData(\n          data.map((e: { [x: string]: string | number | Date }) => {\n            e[\"date\"] = new Date(e[\"date\"]);\n            return e;\n          })\n        );\n      })\n      .catch(console.log);\n  }, []);\n\n  if (vaccinationData.length > 0)\n    return (\n      <div>\n        <Header />\n        <div className=\"App\">\n          <body>\n            <Predictor data={vaccinationData} />\n            <Ranking data={vaccinationData} />\n          </body>\n        </div>\n        <Footer />\n      </div>\n    );\n  else {\n    return (\n      <body>\n        <p>Loading...</p>\n        {/* Do a spinning logo for loading screen */}\n      </body>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}